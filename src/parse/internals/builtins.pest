// Main grammars
builtinDbg   = !{ "dbg" ~ space? ~ variableIdent }
builtinUnset = !{ "unset" ~ space? ~ variableIdent }
builtinExit  = !{ "exit" ~ space? ~ (elviWord | elviNumber)? }
builtinHash  = !{ "hash" ~ space? ~ elviWord? }
builtinCd    = !{ "cd" ~ space? ~ elviWord? }
// TODO: Add commands to `builtinTest` and also `-a` and `-o`
builtinTest = !{ ("[" ~ space+ ~ (builtinTestInvert ~ space+)? ~ (builtinTestPrimaries | builtinTestComparisons) ~ space+ ~ "]") | ("test" ~ space+ ~ (builtinTestInvert ~ space+)? ~ (builtinTestPrimaries | builtinTestComparisons)) }
builtinEcho = !{ "echo" ~ space? ~ (elviWord+)? }

builtinTestInvert    = { #invert = "!" }
builtinTestPrimaries = {
    #block = ("-b" ~ space+ ~ elviWord)
  | #character_special = ("-c" ~ space+ ~ elviWord)
  | #directory_exists = ("-d" ~ space+ ~ elviWord)
  | #file_exists = ("-e" ~ space+ ~ elviWord)
  | #regular_file_exists = ("-f" ~ space+ ~ elviWord)
  | #file_exists_group_id = ("-g" ~ space+ ~ elviWord)
  | #symbolic_link = (("-h" | "-L") ~ space+ ~ elviWord)
  | #sticky_bit_set = ("-k" ~ space+ ~ elviWord)
  | #string_nonzero = ("-n" ~ space+ ~ elviWord)
  | #named_pipe = ("-p" ~ space+ ~ elviWord)
  | #readable_file = ("-r" ~ space+ ~ elviWord)
  | #greater_than_zero_file = ("-s" ~ space+ ~ elviWord)
  | #file_descriptor = ("-t" ~ space+ ~ elviWord)
  | #file_exists_user_id = ("-u" ~ space+ ~ elviWord)
  | #writable_file = ("-w" ~ space+ ~ elviWord)
  | #executable_file = ("-x" ~ space+ ~ elviWord)
  | #string_zero = ("-z" ~ space+ ~ elviWord)
  | #efective_user_id_file = ("-O" ~ space+ ~ elviWord)
  | #efective_group_id_file = ("-G" ~ space+ ~ elviWord)
  | #socket_file_exists = ("-S" ~ space+ ~ elviWord)
}

builtinTestComparisons = {
    #string_equals = (elviWord ~ space+ ~ "=" ~ space+ ~ elviWord)
  | #string_not_equals = (elviWord ~ space+ ~ "!=" ~ space+ ~ elviWord)
  | #ascii_comparison_lt = (elviWord ~ space+ ~ "<" ~ space+ ~ elviWord)
  | #ascii_comparison_gt = (elviWord ~ space+ ~ ">" ~ space+ ~ elviWord)
  | #integer_eq = (elviWord ~ space+ ~ "-eq" ~ space+ ~ elviWord)
  | #integer_ne = (elviWord ~ space+ ~ "-ne" ~ space+ ~ elviWord)
  | #integer_gt = (elviWord ~ space+ ~ "-gt" ~ space+ ~ elviWord)
  | #integer_ge = (elviWord ~ space+ ~ "-ge" ~ space+ ~ elviWord)
  | #integer_lt = (elviWord ~ space+ ~ "-lt" ~ space+ ~ elviWord)
  | #integer_le = (elviWord ~ space+ ~ "-le" ~ space+ ~ elviWord)
}

// Wrapper grammar for any builtin
builtinWrapper = { builtinDbg | builtinUnset | builtinExit | builtinHash | builtinCd | builtinTest | builtinEcho }
